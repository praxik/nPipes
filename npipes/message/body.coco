# -*- mode: python;-*-

from operator import methodcaller

from ..serialize import Serializable
from .header import Encoding, EncodingPlainText, EncodingGzB64

class Body(Serializable):
    def _fromDict(d):
        case d.get("type", "string").lower():
            match "string":
                return BodyInString._fromDict(d)
            match "asset":
                return BodyInAsset._fromDict(d)

data BodyInString(string:str,
                  encoding=EncodingPlainText()) from Body:
    def _toDict(self, meth=methodcaller("_toDict")) = {
            "type": "string",
            "string": self.string,
            "encoding": self.encoding |> meth}
    def _fromDict(d) = BodyInString(string=d.get("string", ""),
                                    encoding=Encoding._fromDict(d.get("encoding", {})))

data BodyInAsset(assetId:str) from Body:
    def _toDict(self, meth=methodcaller("_toDict")) = {
            "type": "asset",
            "assetId": self.assetId}
    def _fromDict(d) = BodyInAsset(assetId=d.get("assetId"))
